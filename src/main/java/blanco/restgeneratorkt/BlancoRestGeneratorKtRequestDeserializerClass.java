package blanco.restgeneratorkt;

import blanco.cg.BlancoCgObjectFactory;
import blanco.cg.valueobject.*;
import blanco.commons.util.BlancoStringUtil;

import java.io.File;
import java.util.List;

/**
 * This class is used to generate the RequestDeserializer class.
 */
public class BlancoRestGeneratorKtRequestDeserializerClass {
    /**
     * Class name of this class itself.
     */
    public static final String CLASS_NAME = "BlancoRestGeneratorKtRequestDeserializer";

    /**
     * A blancoCg object factory.
     */
    private BlancoCgObjectFactory fCgFactory = null;

    /**
     * The source code that contains this class.
     */
    private BlancoCgSourceFile fCgSourceFile = null;

    private String fRuntimepackage = null;
    private String fTelegrampackage = null;
    private String fDeserializerRequestHeader = null;

    public BlancoRestGeneratorKtRequestDeserializerClass(
            final BlancoCgObjectFactory argCgFactory,
            final String argRuntimepackage,
            final String argTelegrampackage,
            final String argDeserializerRequestHeader,
            final String argEncodeing,
            final int argTab
    ) {
        fCgFactory = argCgFactory;
        fRuntimepackage = argRuntimepackage;
        fTelegrampackage = argTelegrampackage;
        fDeserializerRequestHeader = argDeserializerRequestHeader;
        fCgSourceFile = fCgFactory.createSourceFile(argRuntimepackage + ".util",
                "This code is generated by blanco Framework.");
        fCgSourceFile.setEncoding(argEncodeing);
        fCgSourceFile.setTabs(argTab);
    }

    public BlancoCgSourceFile expand() {
        final BlancoCgClass cgClass = fCgFactory.createClass(CLASS_NAME, null);
        fCgSourceFile.getClassList().add(cgClass);

        cgClass.setFinal(true);
        cgClass.setAccess("");

        String deserializerRequestHeader = fRuntimepackage + ".RequestHeader";
        ;
        if (!BlancoStringUtil.null2Blank(fDeserializerRequestHeader).isEmpty()) {
            deserializerRequestHeader = fDeserializerRequestHeader;
        }

        cgClass.setGenerics("S : " + deserializerRequestHeader + ", T : ApiTelegram"); // "<>" will be added automatically.
        BlancoCgType stdDeserializer = fCgFactory.createType(
                "com.fasterxml.jackson.databind.deser.std.StdDeserializer"
        );
        cgClass.getExtendClassList().add(stdDeserializer);
        stdDeserializer.setGenerics("CommonRequest<S, T>");
        stdDeserializer.setConstructorArgs("vc");

        {
            // Description
            final List<String> listDesc = cgClass.getLangDoc()
                    .getDescriptionList();

            listDesc.add("Utility class commonly used by blancoRestGenerator.");
            listDesc.add("");
            listDesc.add("This class is used in the source code generated by the blancoRestGenerator.<br>");
            listDesc
                    .add("This class is used from the source code generated by the blancoRestGenerator. It is not recommended to calls it directly.");
            listDesc.add("");
            listDesc.add("@since 2020.09.01");
            listDesc.add("@author blanco Framework");
        }


        {
            // import
            // The telegram is assumed to exist in runtimepackage + ".valueobject".
            fCgSourceFile.getImportList().add(fTelegrampackage + ".ApiTelegram");
            fCgSourceFile.getImportList().add(fTelegrampackage + ".CommonRequest");
            // Jackson
            fCgSourceFile.getImportList().add("com.fasterxml.jackson.core.JsonParser");
            fCgSourceFile.getImportList().add("com.fasterxml.jackson.databind.DeserializationContext");
            fCgSourceFile.getImportList().add("com.fasterxml.jackson.databind.JsonNode");
            fCgSourceFile.getImportList().add("com.fasterxml.jackson.databind.ObjectMapper");
            fCgSourceFile.getImportList().add("com.fasterxml.jackson.databind.deser.std.StdDeserializer");
        }

        {
            // fields
            BlancoCgField vc = fCgFactory.createField("vc", "java.lang.Class", "A valueClass passed from the standard deserializer.");
            cgClass.getConstructorArgList().add(vc);
            vc.getType().setGenerics("*"); // "<>" will be added automatically.
            vc.setConst(true); // val
            vc.setFinal(true);

            BlancoCgField infoClazz = fCgFactory.createField("infoClazz", "java.lang.Class", "Sets the implementation class of CommonRequest#info.");
            cgClass.getFieldList().add(infoClazz);
            infoClazz.getType().setGenerics("S");
            infoClazz.setConst(false); // var
            infoClazz.setAccess("");
            infoClazz.setFinal(true);
            infoClazz.setNotnull(false); // nullable
            infoClazz.setDefault("null");

            BlancoCgField telegramClazz = fCgFactory.createField("telegramClazz", "java.lang.Class", "Sets the implementation class of CommonRequest#telegram.");
            cgClass.getFieldList().add(telegramClazz);
            telegramClazz.getType().setGenerics("T");
            telegramClazz.setConst(false); // var
            telegramClazz.setAccess("");
            telegramClazz.setFinal(true);
            telegramClazz.setNotnull(false); // nullable
            telegramClazz.setDefault("null");
        }

        {
            // methods
            cgClass.getMethodList().add(buildDeserializeMethod());
            cgClass.getMethodList().add(buildParseRequestHeader());
            cgClass.getMethodList().add(buildParseTelegram());
        }

        return fCgSourceFile;
    }

    private BlancoCgMethod buildDeserializeMethod() {
        BlancoCgMethod deserialize = fCgFactory.createMethod("deserialize", "deserialize JSON content into the value type this serializer handles");
        deserialize.setOverride(true);
        deserialize.setFinal(true);

        BlancoCgParameter jp = fCgFactory.createParameter("jp", "com.fasterxml.jackson.core.JsonParser", "Receives a JsonParse class.");
        deserialize.getParameterList().add(jp);
        jp.setNotnull(false);

        BlancoCgParameter ctxt = fCgFactory.createParameter("ctxt", "com.fasterxml.jackson.databind.DeserializationContext", "Receives a DeserializationContext.");
        deserialize.getParameterList().add(ctxt);
        ctxt.setNotnull(false);

        BlancoCgReturn cgReturn = fCgFactory.createReturn(fRuntimepackage + ".valueobject.CommonRequest", "Parses JSON, packs it into a CommonRequest, and returns it.");
        deserialize.setReturn(cgReturn);
        cgReturn.getType().setGenerics("S, T");
        cgReturn.setNullable(true);

        // Body of the method.
        List<String> lineList = deserialize.getLineList();

        lineList.add("");
        lineList.add("val node = jp?.codec?.readTree<JsonNode>(jp)");
        lineList.add("var info: S? = null");
        lineList.add("var telegram: T? = null");
        lineList.add("val fieldIte = node?.fields()");
        lineList.add("");

        lineList.add("while(fieldIte != null && fieldIte.hasNext()){");
        lineList.add("val fieldEntry = fieldIte.next()");
        lineList.add("val value = fieldEntry.value");
        lineList.add("if(value != null){");
        lineList.add("if(\"info\".equals(fieldEntry.key, true)){");
        lineList.add("info = this.parseRequestHeader(value)");
        lineList.add("} else if (\"telegram\".equals(fieldEntry.key, true)){");
        lineList.add("telegram = this.parseTelegram(value)");
        lineList.add("}");
        lineList.add("}");
        lineList.add("}");

        lineList.add("");

        lineList.add("var retval: CommonRequest<S, T>? = null");
        lineList.add("if (info != null) {");
        lineList.add("retval = CommonRequest<S, T>(info, telegram)");
        lineList.add("}");

        lineList.add("");

        lineList.add("return retval");

        return deserialize;
    }

    private BlancoCgMethod buildParseRequestHeader() {
        BlancoCgMethod parser = fCgFactory.createMethod("parseRequestHeader", "Parses RequestHeader.");
        parser.setOverride(false);
        parser.setFinal(true);
        parser.setAccess("private");

        BlancoCgParameter node = fCgFactory.createParameter("node", "com.fasterxml.jackson.databind.JsonNode", "Receives a JsonNode class.");
        parser.getParameterList().add(node);
        node.setNotnull(true);

        BlancoCgReturn cgReturn = fCgFactory.createReturn("S", "Parses JSON, packs it into S, and returns it.");
        parser.setReturn(cgReturn);
        cgReturn.setNullable(false);

        // Body of the method.
        List<String> lineList = parser.getLineList();

        lineList.add("val mapper = ObjectMapper()");
        lineList.add("val header = mapper.convertValue<S>(node, infoClazz)");
        lineList.add("return header");

        return parser;
    }

    private BlancoCgMethod buildParseTelegram() {
        BlancoCgMethod parser = fCgFactory.createMethod("parseTelegram", "Parses ApiTelegram.");
        parser.setOverride(false);
        parser.setFinal(true);
        parser.setAccess("private");

        BlancoCgParameter node = fCgFactory.createParameter("node", "com.fasterxml.jackson.databind.JsonNode", "Receives a JsonNode class.");
        parser.getParameterList().add(node);
        node.setNotnull(true);

        BlancoCgReturn cgReturn = fCgFactory.createReturn("T", "Parses JSON, packs it into T, and returns it.");
        parser.setReturn(cgReturn);
        cgReturn.setNullable(true);

        // Body of the method.
        List<String> lineList = parser.getLineList();

        lineList.add("val mapper = ObjectMapper()");
        lineList.add("val telegram = mapper.convertValue<T>(node, telegramClazz)");
        lineList.add("return telegram");

        return parser;
    }
}
